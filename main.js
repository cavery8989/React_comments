// var data = [
//   {
//     id:1,
//     author: 'Chris',
//     text: "I like the sun"
//   },
//   {
//     id:2,
//     author: 'Bob',
//     text: 'It Keeps a warm and shelters us from the dark place.'
//   }
// ]



var likes ={

};


var valuesInObj = function (obj) {
  var values = [];
  for(var key in obj){
    values.push(obj[key]);
  }
  return values;
}




var CommentBox = React.createClass({
  handleLikes: function (key) {
    console.log('like!!')
    if(likes[key]){
      console.log('istyre')
      likes[key] = likes[key] + 1;
    }else{
      console.log('fasessssss')
      likes[key] = 1;
    }
    console.log('key in handle Likes', key);
    console.log(likes)
  },
  loadCommentsFromServer: function() {
    console.log('trying to load comments.')

    $.ajax({
        url: this.props.url,
        dataType: 'json',
        cache: false,
        success: function (data) {
          this.setState({data: data});
          console.log('got data successfully!')


        }.bind(this),
        error: function (xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
    });
  },
  handleCommentSubmit: function (comment) {
    var comments = this.state.data;
    //Optimistically set an id on the new comment. It will be replaced by an
    //id generated by the server. In a production applcation you would not use
    //date.now() and would have a more robust function.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data:comment,
      success: function (data) {
        this.setState({data: data});
        console.log('Message sent!');
      }.bind(this),
      error: function (xhr, status, error) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function () {
    return{data:[]};
  },
  componentDidMount: function () {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);

  },
  render: function () {
    var inlineStyle = {
      fontFamily: 'proxima-nova,"Helvetica Neue",Helvetica,Roboto,Arial,sans-serif',
      margin: '0 auto',
      width: '300px',
      background: '#2d2d2d',
      "border-radius": '10px',
      padding: '20px 10px 10px 10px',
      color: '#dddddd'
    };


    var titleStyle = {
      margin: '0 auto',
      paddingLeft: '70px',
      color: '#61dafb'
    };




    var likesArray =  valuesInObj(this.props.likes);
    var totalLikes =  likesArray.reduce((a,b)=>{
      return a + b;
    },0);

    return(
      <div style={inlineStyle} className="commentBox">
        <h1 style={titleStyle}>React JS</h1>
        <p>Total Likes: {totalLikes}</p>
        <CommentsForm onCommentSubmit={this.handleCommentSubmit}/>
        <CommentList data = {this.state.data} likes={this.props.likes} onLike={this.handleLikes}/>

      </div>
    );
  }
});

var CommentList = React.createClass({

  render: function () {
    var likes = this.props.likes;
    // create comment array by mapping over data.
    var commentNodes =  this.props.data.map((comment) =>{
      return(
        <Comment author={comment.author} key ={comment.id} commentId={comment.id} likes={likes[comment.id]} onLike={this.props.onLike}>
          {comment.text}
        </Comment>
      )
    }).reverse();

    return (
      <div className="commentList">
        <h3>Comments</h3>
        {commentNodes}
      </div>
    );
  }
});

var Comment = React.createClass({
  handleLike: function (e) {
    console.log(e.target);
    // todo: send likes upstrem
    // have a function that takes the id of the comment

    this.props.onLike(e.target.id)


  },
  render: function () {
    var styles = {
      color: '#595959',
      background: '#f9f9f9',
      'paddingLeft': '15px',
      'paddingBottom': '10px',
      'paddingRight': '3px',
      'paddingTop': '1px',
      'margin': '10px',
      'border-radius': '2px'
    }


    return(
      <div style={styles} className="comment">
      <h4 className="commentAuthor">
        {this.props.author}
      </h4>
      <p>
        {this.props.children}
      </p>
        <div className="likes">
          <button id={this.props.commentId} onClick={this.handleLike}>like</button>
          <p>likes: <span className="likes"> {this.props.likes? this.props.likes : 0}</span></p>
        </div>
    </div>
    )
  }
});

var CommentsForm = React.createClass({
  getInitialState: function () {
    return {
      author: '',
      text: ''
      }
  },
  handleAuthorChange: function (e) {
    return this.setState({author: e.target.value});
  },
  handleTextChange: function (e) {
    return this.setState({text: e.target.value});
  },
  handleSubmit: function (e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if(!author || !text){
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({
      author:'',
      text:''
    });
  },
  render: function () {
    return(
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input type="text"
               placeholder="Enter name..."
               onChange={this.handleAuthorChange}
        />
        <input type="text"
               placeholder="Enter message..."
               onChange={this.handleTextChange}
        />
        <input type="submit"
               value='Post'
        />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox CommentBox url="https://northcoders-comment-box-server.herokuapp.com/api/comments" pollInterval = {200} likes={likes}/>,
  document.getElementById('example'));